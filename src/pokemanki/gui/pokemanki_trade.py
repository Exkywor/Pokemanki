# Form implementation generated from reading ui file 'designer/pokemanki_trade.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import ctypes
import platform

from aqt import QDialog
from aqt.webview import AnkiWebView
from PyQt6 import QtCore, QtGui, QtWidgets


class TradeWindow(object):
    dialog = None
    webView = None

    def __init__(self, mw, parent):
        self.dialog = QDialog()
        self.dialog.setObjectName("Dialog")
        self.dialog.resize(400, 472)
        self.dialog.setMinimumSize(QtCore.QSize(250, 100))
        self.verticalLayout = QtWidgets.QVBoxLayout(self.dialog)
        self.verticalLayout.setSizeConstraint(
            QtWidgets.QLayout.SizeConstraint.SetMaximumSize
        )
        self.verticalLayout.setSpacing(9)
        self.verticalLayout.setObjectName("verticalLayout")
        self.title = QtWidgets.QLabel(self.dialog)
        self.title.setMaximumSize(QtCore.QSize(16777215, 123))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.title.setFont(font)
        self.title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.title.setWordWrap(True)
        self.title.setObjectName("title")
        self.verticalLayout.addWidget(self.title, 0, QtCore.Qt.AlignmentFlag.AlignTop)

        self.webView = AnkiWebView(parent=self.dialog, title="pokémanki trades")
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding,
            QtWidgets.QSizePolicy.Policy.Expanding,
        )
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.webView.sizePolicy().hasHeightForWidth())
        self.webView.setSizePolicy(sizePolicy)
        self.webView.setObjectName("webView")
        self.webView.set_bridge_command(parent.on_bridge_cmd, parent)
        self.verticalLayout.addWidget(self.webView)

        self.buttonBox = QtWidgets.QDialogButtonBox(self.dialog)
        self.buttonBox.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.buttonBox.setStandardButtons(
            QtWidgets.QDialogButtonBox.StandardButton.Close
        )
        self.buttonBox.setCenterButtons(False)
        self.buttonBox.setObjectName("buttonBox")
        self.verticalLayout.addWidget(self.buttonBox)

        self.retranslateUi()
        self.buttonBox.accepted.connect(self.dialog.accept)  # type: ignore
        self.buttonBox.rejected.connect(self.dialog.reject)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(self.dialog)

        # Set in the middle of the screen
        width = 800
        height = self.dialog.height() + 150

        if platform.system() == "Windows":
            user32 = ctypes.windll.user32
            posX = int(user32.GetSystemMetrics(0) / 2 - width / 2)
            posY = int(user32.GetSystemMetrics(1) / 2 - height / 2)
        else:
            posX = int(mw.frameGeometry().width() / 2 - width / 2)
            posY = int(mw.frameGeometry().height() / 2 - height / 2)

        self.dialog.setGeometry(posX, posY, width, height)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.dialog.setWindowTitle(_translate("Dialog", "Trade Pokémon"))
        self.title.setText(_translate("Dialog", "Today's Trades"))

    def setupWebView(self, trades):
        """
        Set up the web view's html.

        :param list trades: List of trades to display
        """
        self.webView.stdHtml(
            body=_trades_html(trades),
            css=["/pokemanki_css/view_trade.css", "/pokemanki_css/main.css"],
            context=self,
        )

    def open(self, trades):
        """
        Set up the web view and open the dialog.

        :param list trades: List of trades to display
        """
        self.setupWebView(trades)
        self.dialog.show()

    def done(self):
        self.dialog.done(QDialog.DialogCode.Accepted)


def _trades_html(trades):
    """
    Generate the html code for the trades window.

    :param list trades: List of trades to display
    :return: The html code.
    :rtype: str
    """
    # Open trades container
    txt = '<div class="pk-td-container">'

    # Generate each of the trades
    for i in range(len(trades)):
        txt += _trade_html(i, trades)

    # Close trades container
    txt += "</div>"

    return txt


def _trade_html(i, trades):
    """
    Generate the html code for a trade.

    :param int i: Trade number.
    :param list trades: List of trades to display
    :return: Trade's html.
    :rtype: str
    """

    trade = "<script>" "function callTrade(n) { pycmd(n); }" "</script>"

    # Open trade container
    trade += '<div class="pk-td-trade">'

    ###########
    # Head info
    ###########
    trade += (
        '<div class="pk-td-trainer" style="margin-bottom: auto;">'
        f'<h2 style="text-align: center;"><b>Trainer {i + 1}</b></h2>'
        '<div class="pk-divider" style="margin-top: 10px;"></div>'
        "</div>"
    )

    ##########
    # Has
    ##########
    trade += (
        '<div class="pk-td-offer">'
        '<div class="pk-td-offer-txt">'
        '<span class="pk-td-offer-txt-title"><b>Has:</b></span>'
        f'<span class="pk-td-offer-txt-name"><b>{trades[i][0][0]}</b></span>'
        "</div>"
        f'<img src="pokemon_images/{trades[i][0][0]}.png" class="pk-td-offer-img"/>'
        "</div>"
    )

    ##########
    # Wants
    ##########
    trade += (
        '<div class="pk-td-offer">'
        '<div class="pk-td-offer-txt">'
        '<span class="pk-td-offer-txt-title"><b>Wants:</b></span>'
        f'<span class="pk-td-offer-txt-name"><b>{trades[i][1][0]}</b></span>'
        "</div>"
        f'<img src="pokemon_images/{trades[i][1][0]}.png" class="pk-td-offer-img"/>'
        "</div>"
    )

    ##########
    # Bottom
    ##########
    trade += (
        '<div class="pk-td-bottom">'
        '<div class="pk-divider" style="margin-bottom: 10px"></div>'
        f'<button class"pk-button" onclick="callTrade({i})">Trade</button>'
        "</div>"
    )

    # Close trade
    trade += "</div>"

    return trade
